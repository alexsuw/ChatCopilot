from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
import logging

from src.states.team import ChatWithTeam
from src.services.vector_db import get_embedding, pinecone_index
from src.services.llm import get_answer
from src.handlers.message_ingestion import message_buffer
from src.services.supabase_client import get_team_by_id

router = Router()

@router.callback_query(F.data.startswith("chat_with_team:"))
async def start_chat_session(callback: CallbackQuery, state: FSMContext):
    team_id = callback.data.split(":")[1]
    
    try:
        team_doc = await get_team_by_id(team_id)
        team_name = team_doc['name']

        await state.set_state(ChatWithTeam.active)
        await state.update_data(current_team_id=team_id)

        await callback.message.edit_text(
            f"üí¨ **–î–∏–∞–ª–æ–≥ —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –∫–æ–º–∞–Ω–¥—ã ¬´{team_name}¬ª**\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. "
            f"–Ø –Ω–∞–π–¥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –¥–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç.\n\n"
            f"üîπ –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
            f"üîπ –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–ª–æ–≥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/cancel`\n\n"
            f"‚ùì **–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?**",
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Error starting chat session for team {team_id}: {e}", exc_info=True)
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∏–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(ChatWithTeam.active, F.text & ~F.text.startswith("/"))
async def handle_question(message: Message, state: FSMContext, bot: Bot):
    # --- UX: Show "thinking" animation ---
    await bot.send_chat_action(message.chat.id, "typing")

    data = await state.get_data()
    team_id = data.get("current_team_id")
    question = message.text

    if not team_id:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /my_teams.")
        await state.clear()
        return
    
    logging.info(f"Processing Q&A question for team {team_id}: {question[:50]}...")
    
    # --- RAG Pipeline ---
    try:
        # 0. Get system message
        team_doc = await get_team_by_id(team_id)
        team_name = team_doc.get('name', 'Unknown')
        custom_system_message = team_doc.get("system_message")

        # Use custom message or a default one
        system_message = custom_system_message or "–¢—ã ‚Äî ChatCopilot, –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –∏—Ö –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —á–∞—Ç–æ–≤."

        # 1. Get embedding for the question
        question_vector = await get_embedding(question)
        logging.info(f"Created embedding for question in team {team_id}")

        # 2. Query Pinecone
        query_result = pinecone_index.query(
            namespace=f"team-{team_id}",
            vector=question_vector,
            top_k=3, # Get top 3 most relevant chunks
            include_metadata=True
        )
        
        logging.info(f"Pinecone query returned {len(query_result.get('matches', []))} matches for team {team_id}")
        
        # 3. Build context
        context = ""
        for match in query_result['matches']:
            context += match['metadata']['text'] + "\n---\n"
        
        # 4. Add recent messages from buffer
        if team_id in message_buffer and message_buffer[team_id]:
            context += "Recent conversation snippets (not yet in knowledge base):\n"
            context += "\n".join(message_buffer[team_id])
            logging.info(f"Added {len(message_buffer[team_id])} recent messages to context for team {team_id}")

        # 5. Add system message to the context for the LLM
        full_context = f"System Prompt: {system_message}\n\nChat History Context:\n{context}"

        # 6. Get answer from LLM
        answer = await get_answer(full_context, question)
        
        # Add footer with team info
        footer = f"\n\n---\nüí¨ –î–∏–∞–ª–æ–≥ —Å –∫–æ–º–∞–Ω–¥–æ–π ¬´{team_name}¬ª | `/cancel` –¥–ª—è –≤—ã—Ö–æ–¥–∞"
        
        await message.answer(answer + footer, parse_mode="Markdown")
        logging.info(f"Successfully answered question for team {team_id}")

    except Exception as e:
        logging.error(f"Error handling question for team {team_id}: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ò–ò-—Å–µ—Ä–≤–∏—Å–∞–º\n"
            "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–º–∞–Ω–¥–µ\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
            "‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ\n"
            "‚Ä¢ –í—ã–π—Ç–∏ –∏ –≤–æ–π—Ç–∏ –≤ –¥–∏–∞–ª–æ–≥ –∑–∞–Ω–æ–≤–æ (`/cancel` ‚Üí `/my_teams`)"
        )

# Global cancel handler (works in any state)
@router.message(Command("cancel"))
async def cancel_any_session(message: Message, state: FSMContext):
    current_state = await state.get_state()
    
    if current_state:
        await state.clear()
        
        if current_state == ChatWithTeam.active.state:
            await message.answer(
                "‚ùå **–î–∏–∞–ª–æ–≥ —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n"
                "–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/my_teams`\n"
                "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É\n"
                "‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥",
                parse_mode="Markdown"
            )
        else:
            await message.answer("‚ùå –¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await message.answer("‚ÑπÔ∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

# FSM-specific cancel handler (only in chat state) 
@router.message(ChatWithTeam.active, F.text == "/cancel")
async def cancel_chat_session(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚ùå **–î–∏–∞–ª–æ–≥ —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n"
        "–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/my_teams`\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É\n"
        "‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥",
        parse_mode="Markdown"
    ) 