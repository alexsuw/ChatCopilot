import secrets
import string
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ChatMemberUpdated, CallbackQuery

from src.states.team import CreateTeam, JoinTeam, SetSystemMessage
from src.keyboards.inline import select_team_keyboard, select_chat_team_keyboard, select_team_for_system_message_keyboard
from src.services.supabase_client import (
    create_team, create_user, get_team_by_invite_code, add_user_to_team, 
    get_user_teams, get_user_admin_teams, get_user_by_id, link_chat_to_team,
    update_team_system_message
)
# from src.services.vector_db import test_team_vector_creation, get_namespace_stats  # –û–¢–ö–õ–Æ–ß–ï–ù–û
from src.handlers.message_ingestion import message_buffer
from src.settings import settings

router = Router()

def generate_invite_code(length=8):
    alphabet = string.ascii_letters + string.digits
    return ''.join(secrets.choice(alphabet) for i in range(length))

async def get_or_create_user(user: types.User):
    existing_user = await get_user_by_id(user.id)
    if not existing_user:
        user_data = {
            "id": user.id,
            "username": user.username,
            "first_name": user.first_name,
        }
        await create_user(user_data)
        return user_data
    return existing_user

# --- Debug System Handler ---
@router.message(Command("check_buffers"))
async def check_buffers_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É—Ñ–µ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    result = "üìä **–°–æ—Å—Ç–æ—è–Ω–∏–µ –±—É—Ñ–µ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π:**\n\n"
    
    if not message_buffer:
        result += "üì≠ –ë—É—Ñ–µ—Ä—ã –ø—É—Å—Ç—ã\n\n"
        result += "**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
        result += "‚Ä¢ –ë–æ—Ç –Ω–µ–¥–∞–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω\n"
        result += "‚Ä¢ –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤\n"
        result += "‚Ä¢ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö\n"
        result += "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        result += "**–ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:**\n"
        result += "‚Ä¢ `/debug_system` - –ø–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞\n"
        result += "‚Ä¢ `/monitor_messages` - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        result += "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —á–∞—Ç—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã (`/link_chat`)"
    else:
        total_messages = sum(len(msgs) for msgs in message_buffer.values())
        result += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±—É—Ñ–µ—Ä–æ–≤: {len(message_buffer)}\n"
        result += f"üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±—É—Ñ–µ—Ä–∞—Ö: {total_messages}\n\n"
        
        for team_id, messages in message_buffer.items():
            result += f"**–ö–æ–º–∞–Ω–¥–∞ {team_id[:8]}...:**\n"
            result += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –±—É—Ñ–µ—Ä–µ: {len(messages)}/5\n"
            
            if messages:
                result += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
                for msg in messages[-2:]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
                    preview = msg[:40] + "..." if len(msg) > 40 else msg
                    result += f"  - {preview}\n"
            result += "\n"
        
        result += "üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** –ë—É—Ñ–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ 5 —Å–æ–æ–±—â–µ–Ω–∏–π"
    
    await message.answer(result, parse_mode="Markdown")

@router.message(Command("force_process_buffers"))
async def force_process_buffers_command(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –±—É—Ñ–µ—Ä—ã (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    
    user_id = message.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        admin_teams = await get_user_admin_teams(user_id)
        
        if not admin_teams:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥.")
            return
        
        if not message_buffer:
            await message.answer("üì≠ –ë—É—Ñ–µ—Ä—ã –ø—É—Å—Ç—ã - –Ω–µ—á–µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å.")
            return
        
        await message.answer("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—É—Ñ–µ—Ä–æ–≤...")
        
        processed_count = 0
        for team_id, messages in list(message_buffer.items()):
            if messages:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                    chunk_text = "\n".join(messages)
                    
                    if len(chunk_text.strip()) == 0:
                        continue
                    
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                    from src.services.vector_db import get_embedding, upsert_vector
                    import uuid
                    
                    # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
                    vector = await get_embedding(chunk_text)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Pinecone
                    vector_id = str(uuid.uuid4())
                    upsert_vector(vector_id, vector, team_id, chunk_text)
                    
                    # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
                    message_buffer[team_id] = []
                    
                    processed_count += 1
                    await message.answer(
                        f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ {team_id[:8]}...: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                        f"üìÑ –°–æ–∑–¥–∞–Ω –≤–µ–∫—Ç–æ—Ä: {vector_id[:8]}..."
                    )
                    
                except Exception as e:
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã {team_id}: {e}")
        
        if processed_count > 0:
            await message.answer(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±—É—Ñ–µ—Ä–æ–≤: {processed_count}")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –±—É—Ñ–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

@router.message(Command("debug_system"))
async def debug_system_command(message: Message):
    await message.answer("üîß **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã RAG**\n\n–ü—Ä–æ–≤–µ—Ä—è—é –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...")
    
    result = "üîß **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã:**\n\n"
    
    # 1. Check environment variables
    result += "**1. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:**\n"
    try:
        # Check if keys are set (but don't expose them)
        openai_key = settings.openai_api_key.get_secret_value()
        pinecone_key = settings.pinecone_api_key.get_secret_value()
        google_key = settings.google_api_key.get_secret_value()
        
        result += f"‚Ä¢ OpenAI API: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if openai_key and len(openai_key) > 10 else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
        result += f"‚Ä¢ Pinecone API: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if pinecone_key and len(pinecone_key) > 10 else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
        result += f"‚Ä¢ Google AI API: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if google_key and len(google_key) > 10 else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
        result += f"‚Ä¢ Pinecone Host: {'‚úÖ ' + settings.pinecone_host if settings.pinecone_host else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
        
    except Exception as e:
        result += f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}\n"
    
    # 2. Check linked chats
    result += "\n**2. –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã:**\n"
    try:
        from src.services.supabase_client import supabase
        linked_chats = supabase.table("linked_chats").select("*").execute()
        
        if linked_chats.data:
            result += f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(linked_chats.data)} –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:\n"
            for chat in linked_chats.data[:3]:  # Show first 3
                chat_title = chat.get('title', 'Unknown')
                result += f"  ‚Ä¢ Chat {chat['id']} ({chat_title}) ‚Üí Team {chat['team_id']}\n"
            if len(linked_chats.data) > 3:
                result += f"  ‚Ä¢ ... –∏ –µ—â–µ {len(linked_chats.data) - 3} —á–∞—Ç–æ–≤\n"
        else:
            result += "‚ùå –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤\n"
            
    except Exception as e:
        result += f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–æ–≤: {e}\n"
    
    # 3. Check message buffers
    result += "\n**3. –ë—É—Ñ–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:**\n"
    if message_buffer:
        result += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±—É—Ñ–µ—Ä–æ–≤: {len(message_buffer)}\n"
        for team_id, messages in message_buffer.items():
            result += f"  ‚Ä¢ Team {team_id}: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    else:
        result += "‚ö†Ô∏è –ë—É—Ñ–µ—Ä—ã –ø—É—Å—Ç—ã (–Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª–∏)\n"
    
    # 4. Check teams
    result += "\n**4. –ö–æ–º–∞–Ω–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ:**\n"
    try:
        from src.services.supabase_client import supabase
        teams = supabase.table("teams").select("*").execute()
        
        if teams.data:
            result += f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(teams.data)} –∫–æ–º–∞–Ω–¥:\n"
            for team in teams.data[:3]:  # Show first 3
                result += f"  ‚Ä¢ {team['name']} (ID: {team['id'][:8]}...)\n"
            if len(teams.data) > 3:
                result += f"  ‚Ä¢ ... –∏ –µ—â–µ {len(teams.data) - 3} –∫–æ–º–∞–Ω–¥\n"
        else:
            result += "‚ùå –ù–µ—Ç –∫–æ–º–∞–Ω–¥ –≤ —Å–∏—Å—Ç–µ–º–µ\n"
            
    except Exception as e:
        result += f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥: {e}\n"
    
    # 5. Test Pinecone connection
    result += "\n**5. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Pinecone:**\n"
    try:
        from src.services.vector_db import pinecone_index
        stats = pinecone_index.describe_index_stats()
        
        total_vectors = stats.get('total_vector_count', 0)
        namespaces = stats.get('namespaces', {})
        
        result += f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ\n"
        result += f"‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: {total_vectors}\n"
        result += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ namespace: {len(namespaces)}\n"
        
        if namespaces:
            result += "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ namespace:\n"
            for ns, ns_stats in list(namespaces.items())[:3]:
                result += f"  - {ns}: {ns_stats.get('vector_count', 0)} –≤–µ–∫—Ç–æ—Ä–æ–≤\n"
                
    except Exception as e:
        result += f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Pinecone: {e}\n"
    
    result += "\n**üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
    result += "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —á–∞—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–æ–º–∞–Ω–¥–µ (/link_chat)\n"
    result += "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ 5+ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ\n"
    result += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –≤ Digital Ocean\n"
    result += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test_pinecone –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤"
    
    await message.answer(result, parse_mode="Markdown")

# --- Create Team Handler ---
@router.message(Command("create_team"))
async def create_team_command(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
    await state.set_state(CreateTeam.name)

@router.message(CreateTeam.name)
async def process_team_name(message: Message, state: FSMContext):
    team_name = message.text
    user_id = message.from_user.id
    
    try:
        # Ensure user exists in database
        await get_or_create_user(message.from_user)
        
        # Generate invite code
        invite_code = generate_invite_code()
        
        # Create team
        team = await create_team(team_name, user_id, invite_code)
        team_id = team['id']
        
        # Add creator as admin to the team
        await add_user_to_team(user_id, team_id, "admin")
        
        await message.answer(
            f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ '{team_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"üîë –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: `{invite_code}`\n"
            f"üìã ID –∫–æ–º–∞–Ω–¥—ã: `{team_id}`\n\n"
            f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã.",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
    
    await state.clear()

# --- Join Team Handler ---
@router.message(Command("join_team"))
async def join_team_command(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—É:")
    await state.set_state(JoinTeam.invite_code)

@router.message(JoinTeam.invite_code)
async def process_join_team(message: Message, state: FSMContext):
    invite_code = message.text.strip()
    user_id = message.from_user.id
    
    try:
        # Ensure user exists in database
        await get_or_create_user(message.from_user)
        
        # Find team by invite code
        team = await get_team_by_invite_code(invite_code)
        
        if not team:
            await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await state.clear()
            return
        
        team_id = team['id']
        team_name = team['name']
        
        # Add user to team
        await add_user_to_team(user_id, team_id, "member")
        
        await message.answer(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ '{team_name}'!\n"
            f"üìã ID –∫–æ–º–∞–Ω–¥—ã: `{team_id}`",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–∞–Ω–¥–µ: {e}")
    
    await state.clear()

# --- My Teams Handler ---
@router.message(Command("my_teams"))
async def my_teams_command(message: Message):
    user_id = message.from_user.id
    
    try:
        # Ensure user exists in database
        await get_or_create_user(message.from_user)
        
        # Get user teams (both as member and admin)
        teams = await get_user_teams(user_id)
        admin_teams = await get_user_admin_teams(user_id)
        
        if not teams and not admin_teams:
            await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∫–æ–º–∞–Ω–¥. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥–æ–π /create_team –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π /join_team")
            return
        
        # Combine all teams for chat selection
        all_teams = []
        
        # Add admin teams
        for team in admin_teams:
            team_copy = team.copy()
            team_copy['role'] = 'admin'
            all_teams.append(team_copy)
        
        # Add member teams (excluding admin teams to avoid duplicates)
        admin_team_ids = [t['id'] for t in admin_teams]
        for team in teams:
            if team['id'] not in admin_team_ids:
                team_copy = team.copy()
                team_copy['role'] = 'member'
                all_teams.append(team_copy)
        
        if not all_teams:
            await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∫–æ–º–∞–Ω–¥. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥–æ–π /create_team –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π /join_team")
            return
        
        # Build response text with team info
        response = "üë• **–í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
        
        # Show admin teams info
        if admin_teams:
            response += "üîπ **–ö–æ–º–∞–Ω–¥—ã, –≥–¥–µ –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:**\n"
            for team in admin_teams:
                response += f"‚Ä¢ {team['name']} (ID: `{team['id']}`)\n"
                response += f"  üîë –ö–æ–¥: `{team['invite_code']}`\n\n"
        
        # Show member teams info
        member_teams = [t for t in teams if t['id'] not in admin_team_ids]
        if member_teams:
            response += "üî∏ **–ö–æ–º–∞–Ω–¥—ã, –≥–¥–µ –≤—ã —É—á–∞—Å—Ç–Ω–∏–∫:**\n"
            for team in member_teams:
                response += f"‚Ä¢ {team['name']} (ID: `{team['id']}`)\n\n"
        
        response += "üí¨ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º:**"
        
        # Create keyboard for chat selection
        keyboard = select_chat_team_keyboard(all_teams)
        await message.answer(response, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥: {e}")

# --- Test Pinecone Handler (–û–¢–ö–õ–Æ–ß–ï–ù–û) ---
@router.message(Command("test_pinecone"))
async def test_pinecone_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    await message.answer(
        "‚ùå **–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞**\n\n"
        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Pinecone –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "‚Ä¢ `/diagnostic` - –æ–±—â–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ `/test_vllm` - —Ç–µ—Å—Ç vLLM —Å–µ—Ä–≤–µ—Ä–∞",
        parse_mode="Markdown"
    )

# # --- Test Pinecone Handler (–û–¢–ö–õ–Æ–ß–ï–ù–û) ---
# @router.message(Command("test_pinecone"))
# async def test_pinecone_command(message: Message):
#     user_id = message.from_user.id
#     
#     try:
#         # Ensure user exists in database
#         await get_or_create_user(message.from_user)
#         
#         # Get user's admin teams
#         admin_teams = await get_user_admin_teams(user_id)
#         
#         if not admin_teams:
#             await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∫–æ–º–∞–Ω–¥–æ–π /create_team")
#             return
#         
#         await message.answer("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Pinecone...")
#         
#         results = []
#         for team in admin_teams:
#             team_id = team['id']
#             team_name = team['name']
#             
#             # Get current stats
#             stats_before = get_namespace_stats(team_id)
#             
#             # Test vector creation
#             test_result = await test_team_vector_creation(team_id)
#             
#             # Get stats after
#             stats_after = get_namespace_stats(team_id)
#             
#             results.append({
#                 'team': team_name,
#                 'team_id': team_id,
#                 'before': stats_before,
#                 'test': test_result,
#                 'after': stats_after
#             })
#         
#         # Format response
#         response = "üß™ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Pinecone:**\n\n"
#         
#         for result in results:
#             response += f"üìÅ **{result['team']}** (`{result['team_id']}`)\n"
#             response += f"‚Ä¢ –î–æ —Ç–µ—Å—Ç–∞: {result['before']['vector_count']} –≤–µ–∫—Ç–æ—Ä–æ–≤\n"
#             
#             if result['test']['success']:
#                 response += f"‚Ä¢ ‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω (ID: `{result['test']['vector_id']}`)\n"
#                 response += f"‚Ä¢ –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞: {result['after']['vector_count']} –≤–µ–∫—Ç–æ—Ä–æ–≤\n"
#             else:
#                 response += f"‚Ä¢ ‚ùå –¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω: {result['test'].get('error', 'Unknown error')}\n"
#             
#             response += "\n"
#         
#         await message.answer(response, parse_mode="Markdown")
# 
#     except Exception as e:
#         await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Pinecone: {e}")

# --- Link Chat Handler ---
@router.message(Command("link_chat"))
async def link_chat_command(message: Message):
    if message.chat.type == "private":
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return
    
    user_id = message.from_user.id
    
    try:
        # Ensure user exists in database
        await get_or_create_user(message.from_user)
        
        # Get user's admin teams
        admin_teams = await get_user_admin_teams(user_id)
        
        if not admin_teams:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É. –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∫–æ–º–∞–Ω–¥–æ–π /create_team")
            return
        
        # Create keyboard with teams
        keyboard = select_team_keyboard(admin_teams)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É:", reply_markup=keyboard)
        
    except KeyError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {e}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ —Å–µ—Ä–≤–∏—Å–∞\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {e}")

# --- System Message Handler ---
@router.message(Command("set_system_message"))
async def set_system_message_command(message: Message):
    user_id = message.from_user.id
    
    try:
        # Ensure user exists in database
        await get_or_create_user(message.from_user)
        
        # Get user's admin teams
        admin_teams = await get_user_admin_teams(user_id)
        
        if not admin_teams:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∫–æ–º–∞–Ω–¥–æ–π /create_team")
            return
        
        # Create keyboard with teams
        keyboard = select_team_for_system_message_keyboard(admin_teams)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=keyboard)
        
    except KeyError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {e}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ —Å–µ—Ä–≤–∏—Å–∞\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {e}")

# --- Callback Handlers ---
@router.callback_query(F.data.startswith("link_chat:"))
async def process_link_chat(callback: CallbackQuery):
    team_id = callback.data.split(":")[1]
    chat_id = callback.message.chat.id
    chat_title = callback.message.chat.title
    
    try:
        # Create or update linked chat
        await link_chat_to_team(chat_id, team_id, chat_title)
        
        await callback.message.edit_text("‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–æ–º–∞–Ω–¥–µ!")
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ —á–∞—Ç–∞ –∫ –∫–æ–º–∞–Ω–¥–µ.\n"
            f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
            f"‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞\n"
            f"‚Ä¢ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {e}"
        )

@router.callback_query(F.data.startswith("set_system_message:"))
async def process_set_system_message(callback: CallbackQuery, state: FSMContext):
    team_id = callback.data.split(":")[1]
    
    await state.update_data(team_id=team_id)
    await state.set_state(SetSystemMessage.message)
    
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã:")

@router.message(SetSystemMessage.message)
async def process_system_message(message: Message, state: FSMContext):
    data = await state.get_data()
    team_id = data['team_id']
    system_message = message.text
    
    try:
        # Update team with system message
        await update_team_system_message(team_id, system_message)
        
        await message.answer("‚úÖ –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    await state.clear() 