#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.services.vector_db import test_embedding_service, get_embedding


async def main():
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
    print("=" * 50)
    
    # 1. –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
    result = await test_embedding_service()
    
    if result['success']:
        print(f"‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"   –ú–æ–¥–µ–ª—å: {result['model']}")
        print(f"   –†–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {result['embedding_size']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        return
    
    # 2. –¢–µ—Å—Ç —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º...")
    russian_text = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º."
    
    try:
        embedding = await get_embedding(russian_text)
        print(f"‚úÖ –†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   –†–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {len(embedding)}")
        print(f"   –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: {embedding[:5]}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º: {e}")
    
    # 3. –¢–µ—Å—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º...")
    english_text = "Hello! How are you doing? Working on the project."
    
    try:
        embedding = await get_embedding(english_text)
        print(f"‚úÖ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   –†–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {len(embedding)}")
        print(f"   –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: {embedding[:5]}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º: {e}")
    
    # 4. –¢–µ—Å—Ç —Å –¥–ª–∏–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç —Å –¥–ª–∏–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º...")
    long_text = """
    –≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤.
    –û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ —Ä–∞–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    –ú—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∫ –º–æ–¥–µ–ª—å —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤.
    –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—à–µ–≥–æ —á–∞—Ç-–±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∫–æ–º–∞–Ω–¥—ã.
    """
    
    try:
        embedding = await get_embedding(long_text)
        print(f"‚úÖ –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   –†–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {len(embedding)}")
        print(f"   –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: {embedding[:5]}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å –¥–ª–∏–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º: {e}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(main()) 