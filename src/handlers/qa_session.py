from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
import logging

from src.states.team import ChatWithTeam
from src.services.vector_db import get_embedding, pinecone_index
from src.services.llm import get_answer
from src.handlers.message_ingestion import message_buffer
from src.services.supabase_client import get_team_by_id

router = Router()

@router.callback_query(F.data.startswith("start_chat:"))
async def start_chat_session(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞ —Å –ò–ò —á–µ—Ä–µ–∑ callback –æ—Ç –∫–æ–º–∞–Ω–¥—ã /chat"""
    team_id = callback.data.split(":")[1]
    
    try:
        team_doc = await get_team_by_id(team_id)
        team_name = team_doc['name']

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
        await state.set_state(ChatWithTeam.active)
        await state.update_data(current_team_id=team_id)

        await callback.message.edit_text(
            f"ü§ñ **–ß–∞—Ç —Å –ò–ò –∫–æ–º–∞–Ω–¥—ã ¬´{team_name}¬ª**\n\n"
            f"‚úÖ **–†–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω!** –¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –≤–æ–ø—Ä–æ—Å—ã –∫ –ò–ò.\n\n"
            f"üí¨ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
            f"üîπ –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
            f"üîπ –ò–ò –Ω–∞–π–¥–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥—ã\n"
            f"üîπ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏\n\n"
            f"üîπ **–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞:** `/cancel`\n\n"
            f"‚ùì **–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:**",
            parse_mode="Markdown"
        )
        await callback.answer()
        
        logging.info(f"User {callback.from_user.id} started chat session with team {team_id} ({team_name})")
        
    except Exception as e:
        logging.error(f"Error starting chat session for team {team_id}: {e}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–∞—Ç–∞**\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "üîπ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ\n"
            "üîπ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `/chat` –µ—â–µ —Ä–∞–∑\n"
            "üîπ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
            parse_mode="Markdown"
        )

@router.message(ChatWithTeam.active, F.text & ~F.text.startswith("/"))
async def handle_chat_question(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞ —Å –ò–ò"""
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞–±–æ—Ä–∞
    await bot.send_chat_action(message.chat.id, "typing")
    
    data = await state.get_data()
    team_id = data.get("current_team_id")
    question = message.text

    if not team_id:
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏**\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "üîπ –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞: `/cancel`\n"
            "üîπ –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Ç –∑–∞–Ω–æ–≤–æ: `/chat`",
            parse_mode="Markdown"
        )
        await state.clear()
        return
    
    logging.info(f"ü§ñ Processing Q&A question from user {message.from_user.id} for team {team_id}: '{question[:50]}...'")
    
    # RAG Pipeline
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
        team_doc = await get_team_by_id(team_id)
        team_name = team_doc.get('name', 'Unknown')
        custom_system_message = team_doc.get("system_message")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
        system_message = custom_system_message or "–¢—ã ‚Äî ChatCopilot, –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –∏—Ö –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —á–∞—Ç–æ–≤."

        logging.info(f"üìã Using system message for team {team_id}: {system_message[:100]}...")

        # 2. –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
        question_vector = await get_embedding(question)
        logging.info(f"üß† Created embedding for question in team {team_id}")

        # 3. –ò—â–µ–º –≤ Pinecone
        query_result = pinecone_index.query(
            namespace=f"team-{team_id}",
            vector=question_vector,
            top_k=3,  # –¢–æ–ø-3 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–∞
            include_metadata=True
        )
        
        logging.info(f"üìä Pinecone query returned {len(query_result.get('matches', []))} matches for team {team_id}")
        
        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = ""
        for match in query_result['matches']:
            context += match['metadata']['text'] + "\n---\n"
        
        # 5. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞
        if team_id in message_buffer and message_buffer[team_id]:
            context += "Recent conversation snippets (not yet in knowledge base):\n"
            context += "\n".join(message_buffer[team_id])
            logging.info(f"üìù Added {len(message_buffer[team_id])} recent messages to context for team {team_id}")

        # 6. –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
        full_context = f"System Prompt: {system_message}\n\nChat History Context:\n{context}"

        # 7. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Gemini
        logging.info(f"ü§ñ Requesting answer from Gemini for team {team_id}")
        answer = await get_answer(full_context, question)
        
        # 8. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        footer = f"\n---\nüí¨ –ß–∞—Ç —Å –∫–æ–º–∞–Ω–¥–æ–π ¬´{team_name}¬ª | `/cancel` –¥–ª—è –≤—ã—Ö–æ–¥–∞"
        final_answer = answer + footer
        
        await message.answer(final_answer, parse_mode="Markdown")
        
        logging.info(f"‚úÖ Successfully answered question for user {message.from_user.id} in team {team_id}")
        logging.info(f"üìè Answer length: {len(answer)} chars")

    except Exception as e:
        logging.error(f"‚ùå Error handling question for team {team_id}: {e}", exc_info=True)
        await message.answer(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞**\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            f"üîπ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ò–ò-—Å–µ—Ä–≤–∏—Å–∞–º\n"
            f"üîπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
            f"üîπ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–º–∞–Ω–¥–µ\n\n"
            f"**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
            f"üîπ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
            f"üîπ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ\n"
            f"üîπ –í—ã–π—Ç–∏ –∏ –≤–æ–π—Ç–∏ –≤ —á–∞—Ç –∑–∞–Ω–æ–≤–æ: `/cancel` ‚Üí `/chat`\n\n"
            f"---\nüí¨ –ß–∞—Ç —Å –∫–æ–º–∞–Ω–¥–æ–π ¬´{team_name}¬ª | `/cancel` –¥–ª—è –≤—ã—Ö–æ–¥–∞",
            parse_mode="Markdown"
        )

@router.message(ChatWithTeam.active, Command("cancel"))
async def cancel_chat_session(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞ —Å –ò–ò"""
    
    data = await state.get_data()
    team_id = data.get("current_team_id")
    
    try:
        if team_id:
            team_doc = await get_team_by_id(team_id)
            team_name = team_doc.get('name', 'Unknown')
        else:
            team_name = "Unknown"
    except:
        team_name = "Unknown"
    
    await state.clear()
    
    await message.answer(
        f"‚úÖ **–ß–∞—Ç —Å –ò–ò –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n"
        f"–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π ¬´{team_name}¬ª.\n\n"
        f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        f"üîπ `/chat` - –Ω–æ–≤—ã–π —á–∞—Ç —Å –ò–ò\n"
        f"üîπ `/my_teams` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏\n"
        f"üîπ `/help` - –ø–æ–º–æ—â—å\n\n"
        f"ü§ñ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ChatCopilot!",
        parse_mode="Markdown"
    )
    
    logging.info(f"User {message.from_user.id} cancelled chat session with team {team_id} ({team_name})")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö callback (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
@router.callback_query(F.data.startswith("chat_with_team:"))
async def legacy_chat_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö callback –∫–Ω–æ–ø–æ–∫ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É"""
    
    await callback.message.edit_text(
        "üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —á–∞—Ç–∞**\n\n"
        "–¢–µ–ø–µ—Ä—å –¥–ª—è —á–∞—Ç–∞ —Å –ò–ò –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/chat`.\n\n"
        "ü§ñ –≠—Ç–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–±—â–µ–Ω–∏—è —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º!",
        parse_mode="Markdown"
    )
    await callback.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /chat –¥–ª—è —á–∞—Ç–∞ —Å –ò–ò")
    
    logging.info(f"User {callback.from_user.id} used legacy chat handler - redirected to /chat command") 