#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ ChatCopilot
"""

import asyncio
import logging
import os
from typing import Dict, Any
from src.settings import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

class ServiceDiagnostic:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self):
        self.results: Dict[str, Any] = {}
    
    async def check_env_variables(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        required_vars = {
            'BOT_TOKEN': 'Telegram Bot Token',
            'GOOGLE_API_KEY': 'Google Gemini API Key',
            'OPENAI_API_KEY': 'OpenAI API Key',
            'PINECONE_API_KEY': 'Pinecone API Key',
            'PINECONE_HOST': 'Pinecone Host',
            'SUPABASE_URL': 'Supabase URL',
            'SUPABASE_ANON_KEY': 'Supabase Anon Key',
            'SUPABASE_SERVICE_KEY': 'Supabase Service Key'
        }
        
        missing_vars = []
        
        for var, description in required_vars.items():
            try:
                value = getattr(settings, var.lower())
                if hasattr(value, 'get_secret_value'):
                    value = value.get_secret_value()
                
                if not value or value == f"your_{var.lower()}":
                    missing_vars.append(f"{var} ({description})")
                    print(f"‚ùå {var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
                else:
                    print(f"‚úÖ {var}: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ({value[:10]}...)")
                    
            except AttributeError:
                missing_vars.append(f"{var} ({description})")
                print(f"‚ùå {var}: –ù–ï –ù–ê–ô–î–ï–ù")
        
        if missing_vars:
            print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
            for var in missing_vars:
                print(f"  - {var}")
            return False
        
        print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return True
    
    async def check_gemini(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É Google Gemini"""
        print("\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Gemini...")
        
        try:
            from src.services.llm import get_answer
            
            test_context = "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã"
            test_question = "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞?"
            
            answer = await get_answer(test_context, test_question)
            
            if "‚ùå" in answer:
                print(f"‚ùå Gemini –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {answer}")
                return False
            elif len(answer) < 10:
                print(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç: {answer}")
                return False
            else:
                print(f"‚úÖ Gemini —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                print(f"   –û—Ç–≤–µ—Ç: {answer[:50]}...")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Gemini: {e}")
            return False
    
    async def check_openai(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É OpenAI"""
        print("\nüß† –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI...")
        
        try:
            from src.services.vector_db import get_embedding
            
            test_text = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞"
            
            embedding = await get_embedding(test_text)
            
            if embedding and len(embedding) > 0:
                print(f"‚úÖ OpenAI —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                print(f"   –†–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {len(embedding)}")
                return True
            else:
                print("‚ùå OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —ç–º–±–µ–¥–¥–∏–Ω–≥")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
            return False
    
    async def check_pinecone(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É Pinecone"""
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ Pinecone...")
        
        try:
            from src.services.vector_db import pinecone_index, get_namespace_stats
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω–¥–µ–∫—Å—É
            stats = pinecone_index.describe_index_stats()
            print(f"‚úÖ Pinecone –ø–æ–¥–∫–ª—é—á–µ–Ω")
            print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: {stats.total_vector_count}")
            print(f"   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {stats.dimension}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π namespace
            test_namespace = "test-team-123"
            ns_stats = get_namespace_stats(test_namespace)
            print(f"   –í–µ–∫—Ç–æ—Ä–æ–≤ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º namespace: {ns_stats.get('vector_count', 0)}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Pinecone: {e}")
            return False
    
    async def check_supabase(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É Supabase"""
        print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase...")
        
        try:
            from src.services.supabase_client import supabase
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            response = supabase.table('teams').select('id').limit(1).execute()
            
            print(f"‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ teams: {len(response.data) if response.data else 0}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Supabase: {e}")
            return False
    
    async def run_full_diagnostic(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ChatCopilot")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        checks = [
            ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", self.check_env_variables),
            ("Google Gemini", self.check_gemini),
            ("OpenAI", self.check_openai),
            ("Pinecone", self.check_pinecone),
            ("Supabase", self.check_supabase)
        ]
        
        passed = 0
        total = len(checks)
        
        for name, check_func in checks:
            try:
                result = await check_func()
                self.results[name] = result
                if result:
                    passed += 1
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {name}: {e}")
                self.results[name] = False
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 60)
        
        for name, result in self.results.items():
            status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if result else "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
            print(f"{name:.<30} {status}")
        
        print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {passed}/{total}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        if not self.results.get("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", False):
            print("1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example")
            print("2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ API –∫–ª—é—á–∏")
        
        if not self.results.get("Google Gemini", False):
            print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å GOOGLE_API_KEY")
            print("4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ Gemini API")
            print("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–≤–æ—Ç—ã Google API")
        
        if not self.results.get("OpenAI", False):
            print("6. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å OPENAI_API_KEY")
            print("7. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ OpenAI")
        
        if not self.results.get("Pinecone", False):
            print("8. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å PINECONE_API_KEY –∏ PINECONE_HOST")
            print("9. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–Ω–¥–µ–∫—Å Pinecone —Å–æ–∑–¥–∞–Ω")
        
        if not self.results.get("Supabase", False):
            print("10. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ Supabase")
            print("11. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        if passed == total:
            print("\nüéâ –í–°–ï –°–ï–†–í–ò–°–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print("–í–∞—à –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        else:
            print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ ({total - passed} –∏–∑ {total})")
            print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.")

if __name__ == "__main__":
    diagnostic = ServiceDiagnostic()
    asyncio.run(diagnostic.run_full_diagnostic()) 