from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
import logging

from src.states.team import ChatWithTeam
from src.services.llm import get_answer
from src.services.supabase_client import get_team_by_id, search_messages_by_text

router = Router()

@router.callback_query(F.data.startswith("start_chat:"))
async def start_chat_session(callback: CallbackQuery, state: FSMContext):
    """Handler to start a chat session with AI via callback from the /chat command."""
    team_id = callback.data.split(":")[1]
    
    try:
        team_doc = await get_team_by_id(team_id)
        if not team_doc:
            await callback.message.edit_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        team_name = team_doc['name']
        await state.set_state(ChatWithTeam.active)
        await state.update_data(current_team_id=team_id)

        await callback.message.edit_text(
            f"ü§ñ **–ß–∞—Ç —Å –ò–ò –∫–æ–º–∞–Ω–¥—ã ¬´{team_name}¬ª**\n\n"
            f"‚úÖ **–†–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω!** –¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –≤–æ–ø—Ä–æ—Å—ã –∫ –ò–ò.\n\n"
            f"üí¨ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
            f"üîπ –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –ò–ò –Ω–∞–π–¥–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –¥–∞—Ç—å –æ—Ç–≤–µ—Ç.\n"
            f"üîπ –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: `/cancel`\n\n"
            f"‚ùì **–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:**"
        )
        await callback.answer()
        logging.info(f"User {callback.from_user.id} started chat session with team {team_id} ({team_name})")
        
    except Exception as e:
        logging.error(f"Error starting chat session for team {team_id}: {e}", exc_info=True)
        await callback.message.edit_text("‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–∞—Ç–∞.** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(ChatWithTeam.active, F.text & ~F.text.startswith("/"))
async def handle_chat_question(message: Message, state: FSMContext, bot: Bot):
    """Handler for questions in AI chat mode."""
    await bot.send_chat_action(message.chat.id, "typing")
    
    data = await state.get_data()
    team_id = data.get("current_team_id")
    question = message.text

    if not team_id:
        await message.answer("‚ùå **–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏.** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —á–∞—Ç –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é `/chat`.")
        await state.clear()
        return
    
    logging.info(f"ü§ñ Processing Q&A question from user {message.from_user.id} for team {team_id}: '{question[:50]}...'")
    
    try:
        team_doc = await get_team_by_id(team_id)
        team_name = team_doc.get('name', 'Unknown')
        custom_system_message = team_doc.get("system_message")

        system_message = custom_system_message or "–¢—ã ‚Äî ChatCopilot, –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –∏—Ö –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —á–∞—Ç–æ–≤."

        # 1. Search for relevant messages in Supabase
        logging.info(f"üîç Searching for context for '{question[:30]}...' in team {team_id}")
        relevant_messages = await search_messages_by_text(team_id, question, limit=7)
        
        # 2. Build the context string
        if relevant_messages:
            context = "–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n---\n"
            context += "\n".join([f"{msg['user_name']}: {msg['text']}" for msg in relevant_messages])
            context += "\n---"
            logging.info(f"üìö Found {len(relevant_messages)} relevant messages for context.")
        else:
            context = "–í –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É."
            logging.info("üìö No relevant messages found.")

        # 3. Get the answer from vLLM
        full_context = f"System Prompt: {system_message}\n\n{context}"
        logging.info(f"ü§ñ Requesting answer from vLLM for team {team_id}")
        answer = await get_answer(full_context, question)
        
        # 4. Send the final answer
        footer = f"\n---\nüí¨ –ß–∞—Ç —Å –∫–æ–º–∞–Ω–¥–æ–π ¬´{team_name}¬ª | `/cancel` –¥–ª—è –≤—ã—Ö–æ–¥–∞"
        final_answer = answer + footer
        
        await message.answer(final_answer)
        
        logging.info(f"‚úÖ Successfully answered question for user {message.from_user.id} in team {team_id}")

    except Exception as e:
        logging.error(f"‚ùå Error handling question for team {team_id}: {e}", exc_info=True)
        await message.answer("‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞.** –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(ChatWithTeam.active, Command("cancel"))
async def cancel_chat_session(message: Message, state: FSMContext):
    """Handler for exiting AI chat mode."""
    data = await state.get_data()
    team_id = data.get("current_team_id")
    team_name = "Unknown"
    if team_id:
        try:
            team_doc = await get_team_by_id(team_id)
            if team_doc:
                team_name = team_doc.get('name', 'Unknown')
        except Exception:
            pass
    
    await state.clear()
    
    await message.answer(
        f"‚úÖ **–ß–∞—Ç —Å –ò–ò –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n"
        f"–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π ¬´{team_name}¬ª.\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/chat` –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞."
    )
    logging.info(f"User {message.from_user.id} cancelled chat session with team {team_id} ({team_name})")