import httpx
import logging
import asyncio
from typing import Optional, Dict, Any
from src.settings import settings

async def get_answer(context: str, question: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç vLLM —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        str: –û—Ç–≤–µ—Ç –æ—Ç vLLM –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    prompt = f"""CONTEXT:
{context}

QUESTION:
{question}

You are a helpful AI assistant for a team. Your name is ChatCopilot. 
Based on the CONTEXT which contains pieces of conversations from team chats, 
answer the QUESTION. If the context is not enough, say that you don't have enough information. 
Respond in Russian language.

ANSWER:"""
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    payload = {
        "model": settings.vllm_model_name,
        "prompt": prompt,
        "max_tokens": settings.vllm_max_tokens,
        "temperature": settings.vllm_temperature,
        "stop": ["</s>", "<|endoftext|>"]
    }
    
    max_retries = 3
    retry_delay = 1
    
    for attempt in range(max_retries):
        try:
            logging.info(f"ü§ñ vLLM request attempt {attempt + 1}/{max_retries}")
            logging.debug(f"Question: {question[:100]}...")
            logging.debug(f"Context length: {len(context)} chars")
            logging.debug(f"Prompt length: {len(prompt)} chars")
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ vLLM
            async with httpx.AsyncClient(timeout=settings.vllm_timeout) as client:
                response = await client.post(
                    f"{settings.vllm_url}/v1/completions",
                    json=payload,
                    headers={"Content-Type": "application/json"}
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                if response.status_code != 200:
                    logging.error(f"‚ùå vLLM HTTP error {response.status_code}: {response.text}")
                    
                    if response.status_code == 503:
                        logging.warning("üîÑ vLLM server temporarily unavailable")
                        if attempt < max_retries - 1:
                            await asyncio.sleep(retry_delay)
                            retry_delay *= 2
                            continue
                        else:
                            return "‚ùå –°–µ—Ä–≤–µ—Ä –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    
                    elif response.status_code == 422:
                        logging.error("üö´ Invalid request parameters")
                        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    
                    elif response.status_code == 504:
                        logging.error("üïí Request timeout")
                        return "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å."
                    
                    else:
                        if attempt < max_retries - 1:
                            await asyncio.sleep(retry_delay)
                            retry_delay *= 2
                            continue
                        else:
                            return f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ò–ò: {response.status_code}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                try:
                    response_data = response.json()
                except Exception as e:
                    logging.error(f"‚ùå Failed to parse JSON response: {e}")
                    if attempt < max_retries - 1:
                        await asyncio.sleep(retry_delay)
                        retry_delay *= 2
                        continue
                    else:
                        return "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                if "choices" not in response_data or not response_data["choices"]:
                    logging.warning("‚ö†Ô∏è vLLM returned empty choices")
                    if attempt < max_retries - 1:
                        await asyncio.sleep(retry_delay)
                        retry_delay *= 2
                        continue
                    else:
                        return "‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
                
                answer_text = response_data["choices"][0].get("text", "").strip()
                
                if not answer_text:
                    logging.warning("‚ö†Ô∏è vLLM returned empty text")
                    if attempt < max_retries - 1:
                        await asyncio.sleep(retry_delay)
                        retry_delay *= 2
                        continue
                    else:
                        return "‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
                
                # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                logging.info(f"‚úÖ vLLM response received successfully (length: {len(answer_text)} chars)")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
                if answer_text.startswith("ANSWER:"):
                    answer_text = answer_text[7:].strip()
                
                return answer_text
                
        except httpx.ConnectError:
            logging.error(f"‚ùå Connection error to vLLM server on attempt {attempt + 1}")
            if attempt < max_retries - 1:
                logging.info(f"üîÑ Retrying connection in {retry_delay} seconds...")
                await asyncio.sleep(retry_delay)
                retry_delay *= 2
                continue
            else:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ò–ò. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ vLLM –∑–∞–ø—É—â–µ–Ω."
        
        except httpx.TimeoutException:
            logging.error(f"‚ùå Timeout error on attempt {attempt + 1}")
            if attempt < max_retries - 1:
                logging.info(f"üîÑ Retrying after timeout in {retry_delay} seconds...")
                await asyncio.sleep(retry_delay)
                retry_delay *= 2
                continue
            else:
                return "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å."
        
        except Exception as e:
            error_type = type(e).__name__
            error_message = str(e)
            
            logging.error(f"‚ùå vLLM error on attempt {attempt + 1}: {error_type}: {error_message}")
            
            if attempt < max_retries - 1:
                logging.info(f"üîÑ Retrying in {retry_delay} seconds...")
                await asyncio.sleep(retry_delay)
                retry_delay *= 2
                continue
            else:
                return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ò–ò: {error_type}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫."


async def check_vllm_health() -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ vLLM —Å–µ—Ä–≤–µ—Ä–∞
    
    Returns:
        Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
    """
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
            response = await client.get(f"{settings.vllm_url}/health")
            
            if response.status_code == 200:
                return {
                    "status": "healthy",
                    "url": settings.vllm_url,
                    "model": settings.vllm_model_name,
                    "message": "vLLM server is running"
                }
            else:
                return {
                    "status": "unhealthy",
                    "url": settings.vllm_url,
                    "model": settings.vllm_model_name,
                    "message": f"Health check failed: {response.status_code}"
                }
                
    except httpx.ConnectError:
        return {
            "status": "connection_error",
            "url": settings.vllm_url,
            "model": settings.vllm_model_name,
            "message": "Cannot connect to vLLM server"
        }
    except Exception as e:
        return {
            "status": "error",
            "url": settings.vllm_url,
            "model": settings.vllm_model_name,
            "message": f"Health check error: {str(e)}"
        }


async def test_vllm_simple() -> str:
    """
    –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç vLLM —Å–µ—Ä–≤–µ—Ä–∞
    
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    """
    test_context = "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã"
    test_question = "–ö–∞–∫ –¥–µ–ª–∞?"
    
    try:
        answer = await get_answer(test_context, test_question)
        return answer
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}" 